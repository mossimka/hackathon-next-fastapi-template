services:
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    ports:
      - "127.0.0.1:5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: halykoiy2025
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2-alpine
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "127.0.0.1:3000:3000"
    depends_on:
      - backend
    command: npm run start

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      - PYTHONPATH=/app
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_DB=halykoiy2025
      - DB_PORT=5432
      - DB_HOST=db
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  parser-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: ["taskiq", "worker", "src.parse.tasks:broker", "--log-level=INFO"]
    env_file:
      - ./backend/.env
    environment:
      PYTHONPATH: /app
      TASKIQ_REDIS_DSN: redis://redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      chromadb:
        condition: service_started
      redis:
        condition: service_healthy
    restart: unless-stopped

  parser-scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command:
      ["taskiq", "scheduler", "src.parse.tasks:scheduler", "--log-level=INFO"]
    env_file:
      - ./backend/.env
    environment:
      PYTHONPATH: /app
      TASKIQ_REDIS_DSN: redis://redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      chromadb:
        condition: service_started
      redis:
        condition: service_healthy
    restart: unless-stopped

  chromadb:
    image: chromadb/chroma
    ports:
      - "8001:8000"
    volumes:
      - ./chroma_data:/chroma/chroma

volumes:
  pg_data:
  redis_data:
